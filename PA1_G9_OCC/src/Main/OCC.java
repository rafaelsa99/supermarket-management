
package Main;

import Configurations.Configurations;
import javax.swing.table.DefaultTableModel;
import Communication.CClient;
import Communication.CServer;
import java.lang.reflect.InvocationTargetException;
import javax.swing.SwingUtilities;

/**
 * OCC Main class.
 * @author Rafael Sá (104552), Luís Laranjeira (81526)
 */
public class OCC extends javax.swing.JFrame {

    /** State of the simulation */
    private static String simulationState;
    /** Swing Default Table Model */
    private static DefaultTableModel model;
    /** Simulation Configurations */
    private static final Configurations confs = new Configurations();
    /** Communication Client */
    private CClient cclient = null;
    /** Communication Server */
    private CServer cserver;

    /**
     * Instantiate OCC.
     * @param serverPort server port
     */
    public OCC(int serverPort) {
        initComponents();
        initOCC(serverPort);
    }

    /**
     * Initialize OCC.
     * Create communication server.
     * @param serverPort server port
     */
    private void initOCC(int serverPort) {
        OCC.simulationState = "END";
        cserver = new CServer(serverPort);
        cserver.openServer();
        cserver.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jnumberOfCostumers = new javax.swing.JSpinner();
        jLabelNCostumers = new javax.swing.JLabel();
        jLabelCMTimeOut = new javax.swing.JLabel();
        jcostumerMovementTimeOut = new javax.swing.JComboBox<>();
        jLabelSupervisoMode = new javax.swing.JLabel();
        jSupervisorMode = new javax.swing.JComboBox<>();
        jLabelPaymentTime = new javax.swing.JLabel();
        jSupervisorTimeOut = new javax.swing.JComboBox<>();
        jPaymentTimeOut = new javax.swing.JComboBox<>();
        jButtonResume = new javax.swing.JButton();
        jButtonStart = new javax.swing.JButton();
        jButtonSuspend = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();
        jButtonEnd = new javax.swing.JButton();
        jTabbedStatus = new javax.swing.JTabbedPane();
        jScrollPaneCostumers = new javax.swing.JScrollPane();
        jTableCostumers = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableManager = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableCashier = new javax.swing.JTable();
        jManualSupervisor = new javax.swing.JButton();
        jLabelPort = new javax.swing.JLabel();
        jPortInput = new javax.swing.JTextField();
        jHostInput = new javax.swing.JTextField();
        jLabelHost = new javax.swing.JLabel();
        jButtonConnect = new javax.swing.JButton();
        jLabelConnectionStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        setSize(new java.awt.Dimension(0, 0));

        jnumberOfCostumers.setModel(new javax.swing.SpinnerNumberModel(10, 1, 99, 1));

        jLabelNCostumers.setText("Number Of Costumers");

        jLabelCMTimeOut.setText("Costumer Movement TimeOut");

        jcostumerMovementTimeOut
                .setModel(new javax.swing.DefaultComboBoxModel<>(Configurations.getMovementTimeOutPossibilities()));

        jcostumerMovementTimeOut.setSelectedIndex(1);

        jLabelSupervisoMode.setText("Supervisor Mode");

        jSupervisorMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Auto", "Manual" }));

        jLabelPaymentTime.setText("Costumer Time Payment");

        jSupervisorTimeOut
                .setModel(new javax.swing.DefaultComboBoxModel<>(Configurations.getOperatingTimeOutPossibilities()));
        jcostumerMovementTimeOut.setSelectedIndex(1);

        jPaymentTimeOut
                .setModel(new javax.swing.DefaultComboBoxModel<>(Configurations.getMovementTimeOutPossibilities()));
        jcostumerMovementTimeOut.setSelectedIndex(1);

        jButtonResume.setText("Resume");

        jButtonStart.setText("Start");

        jButtonSuspend.setText("Suspend");

        jButtonStop.setText("Stop");

        jButtonEnd.setText("End");
        
        jManualSupervisor.setText("Next Costumer");
        
        jLabelPort.setText("Port");

        jPortInput.setText("6669");

        jHostInput.setText("localhost");

        jLabelHost.setText("Host");

        jButtonConnect.setText("Connect");

        jLabelConnectionStatus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jManualSupervisor.setEnabled(false);
        jButtonResume.setEnabled(false);
        jButtonSuspend.setEnabled(false);
        jButtonStop.setEnabled(false);
        jButtonStart.setEnabled(false);
        jPaymentTimeOut.setSelectedIndex(1);
        jSupervisorTimeOut.setSelectedIndex(1);
        jButtonResume.addActionListener((java.awt.event.ActionEvent evt) -> {
            jButtonResumeActionPerformed(evt);
        });


        jButtonStart.addActionListener((java.awt.event.ActionEvent evt) -> {
            jButtonStartActionPerformed(evt);
        });

        jButtonSuspend.addActionListener((java.awt.event.ActionEvent evt) -> {
            jButtonSuspendActionPerformed(evt);
        });

        jButtonStop.addActionListener((java.awt.event.ActionEvent evt) -> {
            jButtonStopActionPerformed(evt);
        });

        jButtonEnd.addActionListener((java.awt.event.ActionEvent evt) -> {
            jButtonEndActionPerformed(evt);
        });


        jManualSupervisor.addActionListener((java.awt.event.ActionEvent evt) -> {
            jManualSupervisorActionPerformed(evt);
        });
        
        jSupervisorMode.addActionListener((java.awt.event.ActionEvent evt) -> {
            jSupervisorModeActionPerformed(evt);
        });
        
        jSupervisorTimeOut.addActionListener((java.awt.event.ActionEvent evt) -> {
            jSupervisorTimeoutActionPerformed(evt);
        });

        jButtonConnect.addActionListener((java.awt.event.ActionEvent evt) -> {
            jButtonConnectActionPerformed(evt);
        });

        jTableCostumers.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] { },
                new String[] { "Identification", "State" }));
        jScrollPaneCostumers.setViewportView(jTableCostumers);

        jTabbedStatus.addTab("Costumers", jScrollPaneCostumers);

        jTableManager.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] { },
                new String[] { "Identification", "State" }));
        jScrollPane2.setViewportView(jTableManager);

        jTabbedStatus.addTab("Manager", jScrollPane2);

        jTableCashier.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] { },
                new String[] { "Identification", "State" }));
        jScrollPane3.setViewportView(jTableCashier);

        jTabbedStatus.addTab("Cashier", jScrollPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTabbedStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabelCMTimeOut)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jcostumerMovementTimeOut, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelConnectionStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButtonConnect))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabelSupervisoMode)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jSupervisorMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jSupervisorTimeOut, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jManualSupervisor))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButtonResume, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButtonSuspend, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButtonEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabelPaymentTime)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jPaymentTimeOut, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabelNCostumers)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jnumberOfCostumers, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelHost)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jHostInput, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(12, 12, 12)
                            .addComponent(jLabelPort)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jPortInput, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jnumberOfCostumers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelNCostumers)
                        .addComponent(jLabelPort)
                        .addComponent(jPortInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jHostInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelHost))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelCMTimeOut)
                        .addComponent(jcostumerMovementTimeOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonConnect)
                        .addComponent(jLabelConnectionStatus))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelPaymentTime)
                        .addComponent(jPaymentTimeOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(16, 16, 16)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jManualSupervisor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSupervisoMode)
                        .addComponent(jSupervisorMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSupervisorTimeOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonResume, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSuspend, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(jTabbedStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addContainerGap())
            );

        pack();
    }// </editor-fold>                                             

    /**
     * Action for "Next Customer" Button.
     * @param evt event
     */
    private void jManualSupervisorActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jManualSupervisorActionPerformed
        this.cclient.sendMessage("NX");
    }// GEN-LAST:event_jManualSupervisorActionPerformed
    /**
     * Action for "Start" Button.
     * @param evt event
     */
    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonStartActionPerformed
        OCC.simulationState = "START";
        
        jButtonStart.setEnabled(false);
        jButtonSuspend.setEnabled(true);
        jButtonStop.setEnabled(true);
        
        confs.setTotalNumberOfCostumers(Integer.parseInt(jnumberOfCostumers.getValue().toString()));
        confs.setMovementTimeOut(Integer.parseInt(jcostumerMovementTimeOut.getSelectedItem().toString()));
        confs.setTimeToPay(Integer.parseInt(jPaymentTimeOut.getSelectedItem().toString()));
        confs.setOperatingTimeOut(Integer.parseInt(jSupervisorTimeOut.getSelectedItem().toString()));
        
        if(jSupervisorMode.getSelectedItem().toString().equals("Manual")){
            confs.setOperatingMode(false);
        }else{
            confs.setOperatingMode(true);
        }
        
        for(int i = 0; i < confs.getTotalNumberOfCostumers(); i++){
            initializeState("CT", i, "Idle" );
        }
        initializeState("MA", 0, "Idle" );
        initializeState("CH", 0, "Idle" );         
        this.cclient.sendMessage(confs.getConfigurations());
        
    }// GEN-LAST:event_jButtonStartActionPerformed
    /**
     * Action for "Resume" Button.
     * @param evt event
     */
    private void jButtonResumeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonResumeActionPerformed
        OCC.simulationState = "RESUME";
        jButtonResume.setEnabled(false);
        jButtonSuspend.setEnabled(true);
        this.cclient.sendMessage("RE");
    }// GEN-LAST:event_jButtonResumeActionPerformed
    
    /**
     * Action for "Suspend" Button.
     * @param evt event
     */
    private void jButtonSuspendActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonSuspendActionPerformed
        OCC.simulationState = "SUSPEND";
        jButtonResume.setEnabled(true);
        jButtonSuspend.setEnabled(false);
        this.cclient.sendMessage("SU");
    }// GEN-LAST:event_jButtonSuspendActionPerformed
    
    /**
     * Action for "Stop" Button.
     * @param evt event
     */
    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonStopActionPerformed
        OCC.simulationState = "STOP";
        jButtonStop.setEnabled(false);
        jButtonResume.setEnabled(false);
        jButtonSuspend.setEnabled(false);
        jButtonStart.setEnabled(true); 
        cleanTables();
        this.cclient.sendMessage("ST");
    }// GEN-LAST:event_jButtonStopActionPerformed
    
    /**
     * Action for "End" Button.
     * @param evt event
     */
    private void jButtonEndActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonEndActionPerformed
        OCC.simulationState = "END";
        if(cclient != null)
            this.cclient.sendMessage("ED");
        this.cserver.closeServer();  
        System.exit(0);
    }// GEN-LAST:event_jButtonEndActionPerformed
    
    /**
     * Action for "Connect" Button.
     * @param evt event
     */
    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonEndActionPerformed
        this.cclient = new CClient(jHostInput.getText(), Integer.parseInt(jPortInput.getText()));
        if(this.cclient.openServer()){
            jButtonStart.setEnabled(true);
            jButtonConnect.setEnabled(false);
            jLabelConnectionStatus.setText("Connected!");
        }else{
            jLabelConnectionStatus.setText("Failed to Connect!"); 
        }
    }// GEN-LAST:event_jButtonEndActionPerformed

    /**
     * Update state of an entity in the simulation.
     * @param tab entity
     * @param state new state of the entity
     * @param id entity id on the table
     */
   public static void updateState(String tab, String state, int id){
       if(!simulationState.equals("STOP")) {
        switch(tab){
             case "CT":
                 try {
                     SwingUtilities.invokeAndWait(() -> {
                         jTableCostumers.setValueAt(state, id, 1);
                     });
                 } catch (InterruptedException | InvocationTargetException ex) {
                     System.out.println(ex.toString());
                 }
                 break;
             case "MA":
                 try {
                     SwingUtilities.invokeAndWait(() -> {
                         jTableManager.setValueAt(state, id, 1);
                     });
                 } catch (InterruptedException | InvocationTargetException ex) {
                     System.out.println(ex.toString());   
                 }
                 break;
             case "CH":
                 try {
                     SwingUtilities.invokeAndWait(() -> {
                         jTableCashier.setValueAt(state, id, 1);
                     });
                 } catch (InterruptedException | InvocationTargetException ex) {
                     System.out.println(ex.toString());   
                 }
             default:
                 break;
         }
       }
   }
   /**
     * Shopping simulation has ended. 
     * Reset interface.
     */
   public static void shoppingSimulationEnded(){
       simulationState = "STOP";
       jButtonStop.setEnabled(false);
       jButtonResume.setEnabled(false);
       jButtonSuspend.setEnabled(false);
       jButtonStart.setEnabled(true); 
       cleanTables();
   }
   /**
     * Update state of an entity in the simulation.
     * @param tab entity
     * @param state new state of the entity
     */
    public static void updateState(String tab, String state){
        if(!simulationState.equals("STOP")) {
            switch(tab){
                case "CT":
                    try {
                        SwingUtilities.invokeAndWait(() -> {
                        jTableCostumers.setValueAt(state, 0, 1);
                        });
                    } catch (InterruptedException | InvocationTargetException ex) {
                        System.out.println(ex.toString());   
                    }

                    break;
                case "MA":
                    try {
                        SwingUtilities.invokeAndWait(() -> {
                        jTableManager.setValueAt(state, 0, 1);
                        });
                    } catch (InterruptedException | InvocationTargetException ex) {
                        System.out.println(ex.toString());   
                    }

                    break;
                case "CH":
                    try {
                        SwingUtilities.invokeAndWait(() -> {
                        jTableCashier.setValueAt(state, 0, 1);
                        });
                    } catch (InterruptedException | InvocationTargetException ex) {
                        System.out.println(ex.toString());   
                    }
                    break;
                default:
                    break;
            }
        }
   }
   /**
    * Initialize state of an entity
    * @param tab entity
    * @param id id of the entity
    * @param state state of the entity
    */
    public void initializeState(String tab, int id, Object state){
        switch(tab){
            case "CT":
                model = (DefaultTableModel) jTableCostumers.getModel();
                model.addRow(new Object[]{id,state});
                break;
            case "MA":
                model = (DefaultTableModel) jTableManager.getModel();
                model.addRow(new Object[]{id,state});
                break;
            case "CH":
                model = (DefaultTableModel) jTableCashier.getModel();
                model.addRow(new Object[]{id,state});
                break;
            default:
                break;
        }
   }
    /**
     * Clean table of simulation states.
     */
   public static void cleanTables(){
        model = (DefaultTableModel) jTableCostumers.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) jTableManager.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) jTableCashier.getModel();
        model.setRowCount(0);
   }
   
   /**
    * Ends the simulation.
    */
   public static void endSimulation(){
        SwingUtilities.invokeLater(() -> {
            System.exit(0);
        });
    }
   
    /**
     * Action for changing supervisor operation mode.
     * @param evt event
     */
    private void jSupervisorModeActionPerformed(java.awt.event.ActionEvent evt){
        if(jSupervisorMode.getSelectedItem().toString().equals("Manual")){
            jSupervisorTimeOut.setEnabled(false);
            jManualSupervisor.setEnabled(true);
            confs.setOperatingMode(false);
        }else{
            jSupervisorTimeOut.setEnabled(true);
            jManualSupervisor.setEnabled(false);
            confs.setOperatingMode(true);
            confs.setOperatingTimeOut(Integer.parseInt(jSupervisorTimeOut.getSelectedItem().toString()));
        }
        if(!OCC.simulationState.equals("END")){
            this.cclient.sendMessage(confs.getOperatingMode());
        }
    }
    /**
     * Action for changing supervisor operation timeout.
     * @param evt event
     */
    private void jSupervisorTimeoutActionPerformed(java.awt.event.ActionEvent evt){
        confs.setOperatingTimeOut(Integer.parseInt(jSupervisorTimeOut.getSelectedItem().toString()));
        if(!OCC.simulationState.equals("END")){
            this.cclient.sendMessage(confs.getOperatingMode());
        }
    }
    
    /**
     * Main function.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code">
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OCC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OCC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OCC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OCC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            int serverPort = Configurations.SERVER_PORT;
            if(args.length == 1){
                try{
                    serverPort = Integer.parseInt(args[0]);
                }catch (NumberFormatException ex){
                    System.out.println("Invalid parameter!\nParameters: [Optional: serverPort]\n");
                }
            } else if (args.length > 1){
                System.out.println("Invalid parameters!\nParameters: [Optional: serverPort]\n");
            }
            new OCC(serverPort).setVisible(true);
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButtonConnect;
    private static javax.swing.JButton jButtonEnd;
    private static javax.swing.JButton jButtonResume;
    private static javax.swing.JButton jButtonStart;
    private static javax.swing.JButton jButtonStop;
    private static javax.swing.JButton jButtonSuspend;
    private javax.swing.JTextField jHostInput;
    private javax.swing.JLabel jLabelCMTimeOut;
    private javax.swing.JLabel jLabelConnectionStatus;
    private javax.swing.JLabel jLabelHost;
    private javax.swing.JLabel jLabelPort;
    private javax.swing.JLabel jLabelNCostumers;
    private javax.swing.JLabel jLabelPaymentTime;
    private javax.swing.JLabel jLabelSupervisoMode;
    private javax.swing.JButton jManualSupervisor;
    private javax.swing.JComboBox<Integer> jPaymentTimeOut;
    private javax.swing.JTextField jPortInput;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPaneCostumers;
    private javax.swing.JComboBox<String> jSupervisorMode;
    private javax.swing.JComboBox<Integer> jSupervisorTimeOut;
    private javax.swing.JTabbedPane jTabbedStatus;
    private static javax.swing.JTable jTableCashier;
    private static javax.swing.JTable jTableCostumers;
    private static javax.swing.JTable jTableManager;
    private javax.swing.JComboBox<Integer> jcostumerMovementTimeOut;
    private javax.swing.JSpinner jnumberOfCostumers;
    // End of variables declaration
}
